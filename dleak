#!/bin/bash

# [edit] Update to relect your installation location
base=/home/janw/src/dleak

DLEAK_DEPTH=5
DLEAK_FILE=dleak.log
report=no
reportopts=
prog=$(basename $0)

help()
{ cat << _EOM_
DLEAK: a dynamic memory leak debugger

Usage:

  - Recording: $prog [--depth=frame] [--log=file] program args
  - Reporting: $prog --report option ... [file]
  - Usage: $prog --help

This program grew out of frustration for a memory debugger that

  - Is quick and easy to use
  - Doesn't slow down the application too much
  - Supports threaded applications
  - Supports dynamically loaded libraries

Only works on Linux  (relies  on  the   ELF  binary  format  and glibc).
Requires  swipl  (SWI-Prolog  version  7)  and  addr2line  programs  for
reporting. Works without recompilation, but allocation context reporting
gets more detailed if the program  is   compiled  for debugging ("-g" or
"-gdwarf-2 -g3") and without optimization   because  optimization looses
stack context due to inlining and tail recursion optimization.

Home: https://github.com/SWI-Prolog/dleak.git
_EOM_
}

done=false
while [ $done = false ]; do
 case "$1" in
   --depth=*)
	DLEAK_DEPTH=$(echo $1 | sed 's/[^=]*=//')
	shift
	;;
   --log=*)
	DLEAK_FILE=$(echo $1 | sed 's/[^=]*=//')
	shift
	;;
   --report)
	report=yes
	shift
	;;
   --*)
	if [ $report = yes ]; then
	  reportopts="$reportopts $1"
	else
	  help
	  exit 0
	fi
	shift
	;;
   --help)
        help
	exit 0
	;;
   *) done=true
        ;;
 esac
done

if [ $report = yes ]; then
  if [ ! -z "$1" ]; then
    DLEAK_FILE="$1";
  fi
  exec $base/dleak-report $reportopts $DLEAK_FILE
fi

if [ -z "$1" ]; then
  help
  exit 1
fi

LD_PRELOAD=$base/dleak.so DLEAK_FILE=$DLEAK_FILE DLEAK_DEPTH=$DLEAK_DEPTH "$@"

echo Analyse using $prog --report $DLEAK_FILE
